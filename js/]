class Ball {
	constructor(canWidth, canHeight) {
		this.r = 10;
		this.x = canvas.width/2;
		this.y = canvas.height-30;
		this.dx = 20;
		this.dy = -20;
		this.time = 1;
		this.canWidth = canWidth;
		this.canHeight = canHeight;
		this.child = []
	}

	draw(ctx) {
		this.drawChildLine(ctx);
		//this.drawChildCircle(ctx);
		ctx.beginPath();
		ctx.arc(this.x, this.y, this.r, 0, Math.PI*2);
		ctx.fillStyle = "#0095DD";
		ctx.fill();
		ctx.closePath();
	}

	drawChildCircle(ctx) {
		if(this.child.length > 50)
			this.child.shift();

		for(let i=0;i<this.child.length;i++) {
			ctx.beginPath();
			ctx.arc(this.child[i].x, this.child[i].y, this.r-8, 0, Math.PI*2);
			ctx.fillStyle = "#CCCCCC";
			ctx.fill();
			ctx.closePath();
		}
	}

	drawChildLine(ctx) {
		if(this.child.length > 50)
			this.child.shift();

		for(let i=1;i<this.child.length;i++) {
			ctx.beginPath();
			ctx.lineWidth = 4;
			ctx.strokeStyle = "#CCCCCC";
			ctx.moveTo(this.child[i-1].x, this.child[i-1].y);
			ctx.lineTo(this.child[i].x, this.child[i].y);
			ctx.stroke();
			ctx.closePath();
		}
	}

	slow() {
		this.dx = 2;
		this.dy = -2;
	}

	fast() {
		this.dx = 2;
		this.dy = -2;
	}

	switch_time() {
		if(this.time == 1) {
			this.time = 0;
			this.slow()
		}
		else if(this.time == 0) {
			this.time = 1;
			this.fast();
		}
	}

	moveTest() {
		if(this.x + this.dx > this.canWidth - this.r || this.x + this.dx < this.r) {
			this.dx = -this.dx;
		}
		if(this.y + this.dy < this.r) {
			this.dy = -this.dy;
		}
		return this.x + this.dx, this.y + this.dy ;
	}

	move(blocks, paddle) {
		this.child.push({x:this.x, y:this.y});
		this.collisiondetection(blocks);

		if(this.x + this.dx > this.canWidth-this.r|| this.x + this.dx < this.r) {
			this.dx = -this.dx;
		}
		if(this.y + this.dy < this.r) {
			this.dy = -this.dy;
		} else if(this.y + this.dy > this.canHeight-this.r) {
			this.x = this.canWidth/2;
			this.y = this.canHeight-30;
			this.dx = 0;
			this.dy = 0;
			return false;
		}
		else {
//			this.paddleDetection(paddle);
		}

		this.x += this.dx;
		this.y += this.dy;
		return true;
	}

	collisiondetection(blocks) {
		let flag = false;
		for(let c=0; c<blocks.length; c++) {
			for(let r=0; r<blocks[0].length; r++) {
				let b = blocks[c][r];
				if(b.status == 1) {
					const points = this.getPoints(b);
					for(let pi=0;pi<points.length;pi++) {
						let pi2;
						if(pi == 3)
							pi2 = 0;
						else
							pi2 = pi+1;
						if(this.checkPointAndCircle(points[pi])){
							const random = Math.floor(Math.random() * 2);
							if(random == 0)
								this.dy = -this.dy;
							else if(random == 1)
								this.dx = -this.dx;
							b.status = 0;
							flag = true;
						}
						else if(this.getDistancePointAndLine(points[pi], points[pi2]) < this.r) {
							if(pi == 0 || pi == 2)
								this.dy = -this.dy;
							if(pi == 1 || pi == 3)
								this.dx = -this.dx;
							b.status = 0;
							flag = true;
						}
					}
				}
			}
		}
		return flag;
	}

	paddleDetection(paddle) {
		const points = paddle.getPoints();
		if(points == null)
			return false;
		for(let pi=0;pi<points.length;pi++) {
			let pi2;
			if(pi == 3)
				pi2 = 0;
			else
				pi2 = pi+1;
			if(this.checkPointAndCircle(points[pi])){
				this.dy = -this.dy;
			}
			else if(this.getDistancePointAndLine(points[pi], points[pi2]) < this.r) {
				this.dy = -this.dy;
			}
		}
	}

	checkPointAndCircle(point) {
		const dx = this.x - point.x;
		const dy = this.y - point.y;
		if(dx*dx + dy*dy < this.r*this.r) return true;
		else return false;
	}

	getDistancePointAndLine(point1,point2) {
		const dx = point2.x - point1.x;
		const dy = point2.y - point1.y;
		const a = dx*dx + dy*dy;
		const b = dx*(point1.x - this.x) + dy * (point1.y - this.y);
		let t = -b / a;
		if(t<0)t=0;
		if(t>1)t=1;
		const tx = point1.x + dx * t;
		const ty = point1.y + dy * t;
		return Math.sqrt((this.x - tx)*(this.x-tx) + (this.y - ty)*(this.y-ty));
	}

	getPoints(block) {
		return [{x:block.x, y:block.y}, {x:block.x +block.width/2, y:block.y}, {x:block.x + block.width/2, y:block.y + block.height/2}, {x:block.x, y:block.y + block.height/2}];
	}

}
